#if 0
	shc Version 4.0.2, Generic Shell Script Compiler
	GNU GPL Version 3 Md Jahidul Hamid <jahidulhamid@yahoo.com>

	shc -r -f autosc 
#endif

static  char data [] = 
#define      xecc_z	15
#define      xecc	((&data[3]))
	"\145\264\300\211\103\346\005\374\266\311\175\126\101\326\316\276"
	"\100\376\246\066\337"
#define      pswd_z	256
#define      pswd	((&data[65]))
	"\265\336\122\354\334\107\334\342\020\265\013\243\321\343\345\316"
	"\036\035\060\171\362\040\337\246\340\206\335\300\226\213\274\114"
	"\151\017\071\105\127\025\047\150\313\063\013\235\000\336\207\264"
	"\234\151\203\305\115\033\156\175\025\056\123\150\345\162\167\170"
	"\156\207\203\107\126\152\071\165\353\106\157\354\045\366\240\301"
	"\140\044\206\255\077\365\052\125\044\175\276\011\360\065\202\136"
	"\274\005\245\023\157\337\210\133\046\370\107\113\357\350\014\117"
	"\014\223\375\114\210\050\241\254\246\140\266\226\226\070\365\123"
	"\075\233\146\255\172\357\010\240\347\120\353\327\070\370\046\104"
	"\213\044\221\024\114\062\300\362\223\167\211\051\257\176\174\355"
	"\032\343\233\224\322\244\065\272\364\041\221\054\031\270\161\245"
	"\334\002\271\051\065\171\033\310\361\245\362\240\044\157\216\076"
	"\122\051\323\045\316\010\337\302\051\161\357\103\051\140\350\006"
	"\142\241\057\230\033\113\141\014\361\123\255\025\302\074\124\025"
	"\146\047\072\064\060\032\366\132\213\345\235\265\105\205\273\250"
	"\047\353\101\102\066\242\117\047\365\375\075\270\071\221\315\237"
	"\270\010\323\350\042\311\103\256\257\340\143\365\146\037\236\215"
	"\012\337\320\101\201\037\150\167\034\245\060\126\067\375\365\357"
	"\006\310\330\051\222\033\327\102\374\073\067\142\026\361\153\065"
	"\016\234\256\000\274\216\247\235\025\205\135\253\020\032\367\171"
	"\051\060\277\200\106\346\350\022\032\364\257\060\346\033\145\364"
	"\270\024\365\165\243\235\022\270\043\160\143\063\212\133\255\264"
	"\213\154\065\322\123\036\344\155\022\224\235\371"
#define      rlax_z	1
#define      rlax	((&data[385]))
	"\134"
#define      lsto_z	1
#define      lsto	((&data[386]))
	"\236"
#define      text_z	2820
#define      text	((&data[902]))
	"\360\163\244\140\326\330\353\061\205\237\275\362\324\217\105\362"
	"\163\262\005\007\120\376\267\124\354\040\154\320\375\046\122\356"
	"\232\367\116\160\317\072\242\124\331\137\107\256\356\214\241\141"
	"\077\247\151\220\246\041\344\222\101\120\143\077\167\265\055\021"
	"\254\174\202\173\266\044\320\220\203\027\076\162\244\340\324\344"
	"\210\075\164\056\137\131\301\240\251\044\340\041\331\015\063\206"
	"\211\265\002\077\331\322\317\135\352\016\317\217\357\243\163\167"
	"\341\347\246\100\100\147\341\352\213\301\013\145\317\076\353\131"
	"\364\355\230\315\300\150\053\253\167\373\072\147\237\255\337\200"
	"\224\205\301\325\354\243\277\170\145\313\335\064\011\311\215\375"
	"\267\046\313\167\217\367\042\007\362\135\156\221\012\115\021\237"
	"\322\323\164\277\166\063\067\333\377\025\020\010\336\235\006\225"
	"\304\322\015\124\311\060\133\274\215\311\115\227\027\137\066\351"
	"\062\252\250\251\336\340\204\335\365\225\346\323\062\355\151\367"
	"\300\166\113\211\246\246\105\064\160\223\313\207\362\002\161\045"
	"\254\032\316\213\372\123\151\357\350\120\303\033\076\055\023\376"
	"\243\137\210\112\006\316\176\166\141\112\376\124\114\157\172\371"
	"\212\111\205\204\235\356\164\206\077\070\242\175\145\265\174\011"
	"\024\004\124\032\323\323\221\065\035\220\212\151\377\004\142\212"
	"\115\347\016\352\326\203\160\026\273\022\224\041\310\020\052\335"
	"\025\177\370\350\122\212\036\157\032\250\331\032\254\073\244\371"
	"\043\262\344\372\066\125\021\361\150\245\023\060\265\076\015\312"
	"\275\006\263\017\220\321\177\252\171\130\304\046\224\150\037\270"
	"\033\004\262\121\131\303\103\301\151\126\362\036\225\000\351\122"
	"\006\235\142\226\156\341\100\350\071\005\016\315\155\056\205\211"
	"\062\070\332\214\374\036\116\145\164\100\204\012\100\155\134\107"
	"\013\277\335\171\240\036\142\331\044\160\247\221\237\054\032\322"
	"\145\365\136\141\023\254\307\210\355\113\222\056\271\357\165\304"
	"\256\123\076\117\162\240\050\226\021\320\047\261\374\102\203\142"
	"\070\341\304\114\216\213\324\174\327\147\252\221\127\040\126\006"
	"\163\224\125\345\065\176\174\107\116\244\370\113\347\173\255\037"
	"\135\161\153\354\375\100\151\325\250\024\147\000\064\275\006\250"
	"\121\133\216\257\313\147\334\145\303\102\356\067\146\234\124\353"
	"\326\106\131\367\371\142\211\332\367\106\042\115\366\335\056\207"
	"\042\345\365\240\317\310\344\352\143\322\207\153\352\002\113\277"
	"\324\024\233\344\160\376\344\246\162\276\001\354\211\327\117\223"
	"\343\143\153\055\125\315\073\330\371\132\237\375\242\246\356\235"
	"\064\332\123\144\052\355\367\155\210\207\151\211\230\315\124\064"
	"\014\370\030\354\026\163\136\171\103\333\312\354\157\321\031\272"
	"\261\163\306\205\010\366\277\153\261\306\122\223\064\051\226\267"
	"\270\337\166\331\243\366\151\075\257\352\306\161\256\306\107\323"
	"\112\161\033\161\234\371\174\023\112\260\155\336\076\157\027\217"
	"\272\207\222\023\330\153\326\021\331\215\352\114\362\271\375\316"
	"\137\240\323\355\071\122\326\242\061\052\103\173\257\056\052\123"
	"\116\056\062\244\356\126\376\331\063\370\375\305\144\237\142\163"
	"\166\061\127\210\051\215\273\326\113\133\250\020\140\341\051\000"
	"\234\012\373\150\054\252\102\162\313\322\047\235\220\353\216\057"
	"\136\235\323\336\171\174\375\004\104\032\371\040\302\026\170\270"
	"\175\204\304\040\141\076\025\262\116\311\255\255\246\337\124\153"
	"\173\066\234\343\272\147\256\317\272\071\142\241\031\024\014\256"
	"\214\175\050\211\257\154\063\253\245\022\205\223\031\364\164\232"
	"\151\305\324\265\061\127\025\276\010\316\001\125\365\043\053\033"
	"\300\033\147\047\353\355\065\234\023\055\044\072\232\305\300\254"
	"\131\233\060\110\272\351\303\251\362\070\237\035\375\176\161\270"
	"\157\043\234\143\275\363\061\270\313\322\003\227\121\045\201\265"
	"\147\265\372\261\230\324\353\116\314\231\365\145\367\307\153\043"
	"\006\344\254\017\112\015\320\366\213\041\232\363\253\102\253\371"
	"\037\371\300\343\057\277\246\137\005\143\011\274\036\215\203\357"
	"\221\171\300\333\065\147\027\133\200\106\126\225\026\046\356\043"
	"\344\071\335\071\373\121\050\360\273\143\012\354\247\227\364\316"
	"\124\352\166\177\071\035\012\252\171\215\207\231\040\112\232\313"
	"\172\265\320\202\227\125\165\023\124\163\104\175\101\167\065\011"
	"\076\167\340\157\236\011\075\260\161\355\341\317\127\007\005\015"
	"\272\262\311\346\123\064\165\254\070\304\231\057\121\355\153\043"
	"\276\102\211\070\013\261\323\103\174\123\312\153\317\052\271\105"
	"\116\247\235\322\155\365\225\257\123\231\063\025\016\321\216\126"
	"\040\165\371\367\115\220\172\160\361\031\350\203\150\164\210\166"
	"\042\214\120\223\203\357\371\135\116\201\110\051\167\124\060\062"
	"\367\026\346\370\147\377\374\067\214\262\317\177\247\166\264\303"
	"\350\062\110\175\223\352\051\076\160\117\102\341\133\136\371\167"
	"\121\154\236\110\065\042\040\030\300\030\171\155\326\257\216\227"
	"\165\045\053\264\313\337\045\377\073\332\367\155\134\127\024\007"
	"\115\325\253\237\105\277\214\257\036\344\253\054\203\331\042\330"
	"\271\224\163\360\236\272\005\100\225\344\157\312\240\103\216\113"
	"\266\234\121\113\152\136\142\253\213\013\022\147\166\221\372\036"
	"\251\120\211\152\043\325\104\304\365\337\013\041\266\316\122\145"
	"\075\343\374\021\121\217\250\126\332\050\066\205\355\016\033\214"
	"\014\000\300\043\305\277\312\010\155\001\130\261\100\314\344\113"
	"\023\321\222\044\150\262\175\317\007\176\355\200\036\112\144\034"
	"\065\233\160\224\041\001\265\125\312\216\213\051\112\271\171\117"
	"\343\060\150\031\073\317\115\047\135\255\222\103\251\012\371\210"
	"\307\005\146\203\327\365\334\340\177\145\116\035\367\320\230\136"
	"\124\373\104\067\126\053\161\150\137\365\226\332\047\076\015\000"
	"\254\100\347\225\261\165\101\226\060\346\274\143\231\266\001\231"
	"\034\101\120\071\317\101\040\277\251\154\363\313\340\232\077\347"
	"\273\262\133\015\114\274\050\347\041\053\331\113\116\200\370\072"
	"\335\046\207\215\364\013\032\304\326\350\257\322\155\012\351\140"
	"\365\365\143\244\022\063\274\201\063\105\275\325\367\063\116\234"
	"\101\014\347\323\030\173\063\064\056\013\165\236\306\015\305\114"
	"\215\343\111\232\014\212\146\331\075\176\356\344\242\017\357\027"
	"\127\131\110\315\101\105\246\124\076\103\053\112\160\307\204\340"
	"\007\373\210\237\145\374\016\254\262\130\324\311\360\167\113\376"
	"\142\264\020\327\013\316\011\320\336\223\031\266\047\330\013\331"
	"\136\202\313\320\257\331\306\312\255\035\276\141\040\344\047\061"
	"\216\370\177\135\112\267\316\202\161\071\166\225\256\026\107\113"
	"\146\012\110\045\242\232\215\207\273\322\272\264\032\121\300\335"
	"\237\273\043\250\245\023\373\037\317\056\212\211\355\320\274\263"
	"\377\324\250\314\276\041\141\062\377\330\035\301\102\200\051\172"
	"\173\106\043\102\232\227\075\015\002\337\011\036\056\255\314\002"
	"\230\065\332\273\303\267\311\032\322\003\202\100\257\221\262\044"
	"\320\375\211\133\011\360\274\332\330\256\102\010\173\162\063\072"
	"\153\353\213\044\224\045\345\002\272\203\067\265\335\005\345\327"
	"\133\114\260\111\136\152\313\207\070\322\372\064\160\324\252\164"
	"\142\007\233\072\107\345\026\271\374\234\365\110\174\111\066\242"
	"\077\326\330\107\231\222\022\102\034\213\255\047\230\016\301\320"
	"\155\003\141\360\216\005\155\166\226\315\175\176\203\210\206\064"
	"\366\233\126\045\237\171\327\137\270\241\121\132\076\325\215\045"
	"\237\311\211\117\303\011\004\102\267\032\322\160\227\210\160\203"
	"\105\021\366\312\047\235\351\324\216\241\155\157\077\207\337\313"
	"\363\057\356\047\230\303\057\010\353\013\331\177\353\256\304\003"
	"\176\206\114\242\075\066\263\106\244\227\214\061\157\246\220\233"
	"\024\376\101\115\011\100\112\142\316\377\233\204\313\226\230\116"
	"\225\275\363\311\125\137\153\210\107\074\257\244\141\057\305\101"
	"\024\343\011\251\042\030\247\342\171\056\237\313\115\360\315\255"
	"\324\006\257\211\147\021\121\212\002\333\241\344\242\012\310\022"
	"\065\157\110\351\106\172\060\310\232\261\025\161\166\313\253\064"
	"\034\142\044\123\142\136\135\372\273\350\171\054\155\131\327\304"
	"\355\344\053\221\002\077\136\141\120\136\201\055\044\356\106\363"
	"\331\222\100\004\217\112\332\123\230\316\312\226\060\326\004\254"
	"\262\264\347\325\011\327\135\031\351\046\075\233\351\207\351\372"
	"\071\102\277\111\314\062\372\354\177\050\211\015\004\217\106\132"
	"\164\274\130\222\315\150\335\365\135\127\300\216\277\242\323\233"
	"\311\247\057\032\047\171\344\365\255\203\311\350\274\331\254\052"
	"\241\120\054\313\130\262\035\264\040\372\103\372\310\111\004\236"
	"\350\254\253\050\256\166\220\140\255\265\312\322\165\031\340\235"
	"\036\063\263\345\375\211\124\311\323\366\040\221\073\043\244\212"
	"\376\156\032\245\127\233\105\067\002\227\117\241\031\160\344\234"
	"\133\254\003\045\221\137\327\134\022\151\201\322\155\121\005\257"
	"\106\236\105\314\343\332\142\073\364\147\077\141\055\167\071\140"
	"\237\056\201\103\154\263\273\102\222\137\376\257\313\255\213\262"
	"\022\254\175\116\174\112\013\220\376\073\346\146\056\110\034\150"
	"\101\212\322\067\327\342\323\263\157\131\301\070\011\261\217\040"
	"\022\312\357\347\320\002\276\106\007\252\221\271\031\123\003\176"
	"\200\276\044\341\156\202\336\267\354\344\275\173\155\327\021\324"
	"\025\304\207\237\257\300\004\350\025\345\025\014\063\260\371\004"
	"\114\013\174\067\312\336\015\102\252\264\052\024\274\226\030\305"
	"\255\142\314\102\127\115\226\121\067\316\064\230\371\105\320\307"
	"\155\270\202\056\140\011\345\255\021\026\103\323\152\132\165\200"
	"\262\237\256\352\146\132\372\174\245\161\071\351\027\077\051\175"
	"\233\206\206\270\314\254\217\173\214\266\075\377\227\156\122\340"
	"\053\030\022\057\352\342\347\002\330\267\166\312\341\115\324\123"
	"\216\010\117\304\217\202\171\220\076\331\141\050\052\201\340\230"
	"\054\243\103\032\140\151\266\123\317\325\324\201\132\371\131\217"
	"\147\033\273\305\011\313\250\117\330\210\047\123\214\165\274\367"
	"\362\155\203\063\375\342\316\364\020\347\023\244\170\044\025\006"
	"\210\126\344\237\263\314\372\362\207\364\352\220\205\032\070\366"
	"\333\133\372\275\117\336\061\116\164\104\354\041\132\065\153\047"
	"\304\221\057\075\003\226\064\251\140\330\167\162\057\316\143\312"
	"\254\332\275\137\014\315\272\221\270\232\062\007\040\275\002\361"
	"\176\157\056\207\226\024\016\376\031\357\110\025\027\373\003\136"
	"\174\067\001\252\121\201\267\004\064\255\140\347\102\341\072\306"
	"\060\321\032\156\156\263\125\077\027\065\352\025\100\057\043\202"
	"\202\315\122\354\301\127\217\230\111\237\140\247\240\020\023\360"
	"\011\117\043\210\141\336\076\331\054\147\266\020\236\122\074\136"
	"\356\001\201\327\053\166\364\070\265\365\231\201\262\233\041\140"
	"\026\361\220\057\117\074\202\245\320\346\070\352\142\221\112\100"
	"\177\323\076\177\001\230\075\316\225\014\347\226\356\001\243\331"
	"\015\251\114\241\060\214\061\137\053\003\116\141\162\134\170\171"
	"\377\015\114\034\006\073\050\250\051\211\037\333\276\274\142\210"
	"\211\127\376\171\032\173\301\340\275\212\103\261\033\374\204\272"
	"\012\240\203\027\047\333\277\274\307\214\220\202\263\060\037\252"
	"\300\177\055\042\103\305\376\362\171\003\125\364\367\066\074\305"
	"\342\267\252\355\226\073\246\322\171\376\335\206\064\307\223\267"
	"\100\174\120\233\071\101\111\360\362\306\174\003\235\243\310\071"
	"\300\120\145\321\131\220\117\352\354\376\023\340\170\157\005\330"
	"\100\004\011\232\276\270\325\334\013\212\035\347\365\175\047\015"
	"\337\212\360\337\224\375\175\125\113\363\157\313\211\222\043\041"
	"\005\147\064\306\235\361\135\176\002\107\260\060\070\255\065\061"
	"\310\311\371\376\011\050\162\330\202\070\103\266\132\037\036\314"
	"\372\301\056\311\225\261\306\066\312\103\230\131\143\377\022\036"
	"\023\161\301\170\112\043\364\241\367\230\034\236\013\020\257\022"
	"\345\042\267\020\151\102\053\255\000\334\374\267\171\033\347\272"
	"\304\307\377\304\357\362\316\152\313\310\037\141\002\022\237\035"
	"\326\253\205\261\214\056\374\203\323\235\066\060\234\325\325\120"
	"\210\160\110\305\351\261\251\051\037\023\224\261\342\012\223\276"
	"\345\051\024\101\016\246\124\372\274\344\007\152\230\242\026\052"
	"\357\305\007\245\071\045\215\206\311\357\253\127\034\210\022\165"
	"\011\206\067\307\247\350\306\176\041\354\107\267\153\357\204\203"
	"\315\137\327\237\227\041\141\113\240\152\226\372\136\273\302\350"
	"\302\134\076\367\065\232\232\344\174\051\136\271\022\065\364\302"
	"\272\350\314\372\001\005\163\030\110\056\206\254\353\060\336\310"
	"\265\304\051\034\111\170\014\111\030\225\307\064\046\162\276\316"
	"\135\121\201\054\115\365\067\017\263\377\351\065\127\325\123\335"
	"\312\345\040\105\305\343\210\034\021\143\017\261\150\322\064\016"
	"\147\046\100\235\021\131\117\241\202\137\074\045\224\256\262\361"
	"\064\133\304\257\131\020\160\002\337\123\130\374\367\323\245\223"
	"\220\121\113\072\117\277\250\242\044\213\313\341\356\031\261\102"
	"\275\060\355\066\375\245\361\323\030\177\376\175\257\054\170\136"
	"\223\005\332\125\126\034\243\010\202\023\204\052\220\044\331\276"
	"\177\116\125\101\112\270\313\072\210\260\133\316\307\112\113\371"
	"\363\174\263\271\124\144\006\305\063\303\100\271\361\110\051\144"
	"\146\242\150\015\276\060\001\113\273\200\075\033\151\373\075\241"
	"\127\323\000\323\314\356\347\335\225\202\114\233\265\074\025\236"
	"\131\155\311\122\155\105\060\253\275\020\074\245\110\256\365\361"
	"\131\003\126\233\102\340\163\365\163\036\361\155\157\230\164\070"
	"\137\224\163\106\172\273\230\341\103\247\202\261\060\023\027\313"
	"\157\122\344\044\270\177\170\041\364\327\276\257\300\374\275\045"
	"\353\243\300\321\124\063\302\070\347\066\200\216\267\277\200\006"
	"\117\231\055\233\316\264\212\126\345\023\261\127\051\040\046\377"
	"\322\244\174\156\062\322\244\357\255\173\366\363\011\123\327\205"
	"\255\260\225\330\057\304\166\311\340\344\256\333\362\066\147\317"
	"\116\131\017\102\153\176\261\305\043\247\273\270\371\237\214\334"
	"\025\033\016\100\073\332\044\240\047\132\063\055\112\060\311\052"
	"\324\210\276\177\231\152\257\361\241\266\363\256\167\171\115\215"
	"\123\123\273\111\114\216\300\354\002\375\345\033\275\034\347\035"
	"\047\223\112\023\176\217\323\075\250\276\174\264\035\077\231\026"
	"\206\277\135\061\033\002\303\357\351\250\136\372\344\107\304\254"
	"\274\043\132\376\174\014\010\261\142\200\101\253\042\054\066\272"
	"\055\375\222\161\031\366\354\207\332\012\316\050\256\307\163\225"
	"\103\041\265\241\223\041\216\220\142\367\146\013\013\315\013\100"
	"\212\022\351\334\156\167\144\110\202\063\160\061\372\343\306\075"
	"\004\174\337\227\235\155\050\000\145\217\013\160\135\027\261\347"
	"\051\232\304\227\021\050\337\224\133\117\305\126\063\214\224\070"
	"\010\163\320\246\340\370\246\105\210\262\266\345\311\150\315\362"
	"\002\221\211\024\272\150\250\025\270\155\153\353\371\377\043\002"
	"\163\363\250\124\354\117\232\165\001\120\132\313\270\050\275\273"
	"\271\107\317\163\260\167\211\150\345\365\124\336\364\170\340\147"
	"\154\211\273\131\331\125\316\333\246\051\246\137\121\144\032\012"
	"\254\352\176\134\141\007\305\106\374\032\045\361\222\006\131\376"
	"\217\025\127\151\153\045\104\022\116\352\162\237\117\215\252\373"
	"\167\051\130\330\061\035\037\056\070\105\037\312\113\171\311\333"
	"\217\040\104\373\106\210\015\225\163\177\065\303\014\340\276\203"
	"\011\026\134\072\064\174\150\154\301\210\067\015\001\000\350\221"
	"\041\054\214\150\265\231\375\051\031\063\354\046\023\252\251\035"
	"\301\006\127\366\203\300\143\104\110\233\121\112\233\072\333\275"
	"\147\147\045\034\001\043\106\033\126\062\101\152\335\353\207\237"
	"\361\337\225\165\237\371\271\350\224\013\063\060\105\016\355\255"
	"\166\022\311\170\065\017\223\214\102\324\366\037\277\176\276\261"
	"\136\124\046\376\116\340\347\342\353\032\022\061\050\000\336\237"
	"\022\250\027\110\270\252\324\372\177\313\032\076\112\330\357\250"
	"\055\026\246\173\366\215\136\342\250\161\024\320"
#define      tst1_z	22
#define      tst1	((&data[4084]))
	"\204\233\207\314\123\223\301\141\042\225\155\200\027\000\065\263"
	"\275\231\140\376\017\203\255\325\046\156\133\062\241"
#define      inlo_z	3
#define      inlo	((&data[4108]))
	"\322\202\345"
#define      chk1_z	22
#define      chk1	((&data[4116]))
	"\101\340\136\157\366\001\016\213\012\214\306\127\335\031\170\305"
	"\200\003\061\210\251\166\221\057\377\004\045\005\353\354\223"
#define      msg2_z	19
#define      msg2	((&data[4146]))
	"\273\343\014\055\154\140\213\165\315\335\324\360\216\013\111\113"
	"\264\052\142\302\046\056\274\326"
#define      opts_z	1
#define      opts	((&data[4166]))
	"\347"
#define      msg1_z	65
#define      msg1	((&data[4175]))
	"\067\037\023\350\213\174\330\101\313\317\056\037\253\076\026\260"
	"\144\131\133\261\121\113\033\234\057\160\207\242\000\014\034\260"
	"\347\346\206\033\267\317\265\050\145\372\146\076\336\146\137\237"
	"\304\054\012\136\155\075\337\322\056\013\147\122\176\155\364\204"
	"\145\046\057\063\017\341\265\061\232\276\270\240\055\257\246\030"
	"\233\072\142\152\166\035"
#define      tst2_z	19
#define      tst2	((&data[4255]))
	"\044\000\204\035\237\100\035\204\002\224\003\052\301\374\311\312"
	"\202\011\222\305\214\374"
#define      chk2_z	19
#define      chk2	((&data[4275]))
	"\321\252\361\320\074\070\376\351\240\041\272\235\274\154\000\250"
	"\001\177\311\133\074"
#define      date_z	1
#define      date	((&data[4296]))
	"\027"
#define      shll_z	10
#define      shll	((&data[4299]))
	"\147\251\344\373\220\232\035\112\203\257\363\265\266\007"/* End of data[] */;
#define      hide_z	4096
#define SETUID 0	/* Define as 1 to call setuid(0) at start of script */
#define DEBUGEXEC	0	/* Define as 1 to debug execvp calls */
#define TRACEABLE	1	/* Define as 1 to enable ptrace the executable */
#define HARDENING	0	/* Define as 1 to disable ptrace/dump the executable */
#define HARDENINGSP	0	/* Define as 1 to disable bash child process */
#define BUSYBOXON	0	/* Define as 1 to enable work with busybox */

/* rtc.c */

#include <sys/stat.h>
#include <sys/types.h>

#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

/* 'Alleged RC4' */

static unsigned char stte[256], indx, jndx, kndx;

/*
 * Reset arc4 stte. 
 */
void stte_0(void)
{
	indx = jndx = kndx = 0;
	do {
		stte[indx] = indx;
	} while (++indx);
}

/*
 * Set key. Can be used more than once. 
 */
void key(void * str, int len)
{
	unsigned char tmp, * ptr = (unsigned char *)str;
	while (len > 0) {
		do {
			tmp = stte[indx];
			kndx += tmp;
			kndx += ptr[(int)indx % len];
			stte[indx] = stte[kndx];
			stte[kndx] = tmp;
		} while (++indx);
		ptr += 256;
		len -= 256;
	}
}

/*
 * Crypt data. 
 */
void arc4(void * str, int len)
{
	unsigned char tmp, * ptr = (unsigned char *)str;
	while (len > 0) {
		indx++;
		tmp = stte[indx];
		jndx += tmp;
		stte[indx] = stte[jndx];
		stte[jndx] = tmp;
		tmp += stte[indx];
		*ptr ^= stte[tmp];
		ptr++;
		len--;
	}
}

/* End of ARC4 */

#if HARDENING

#include <sys/ptrace.h>
#include <sys/wait.h>
#include <signal.h>
#include <sys/prctl.h>
#define PR_SET_PTRACER 0x59616d61

/* Seccomp Sandboxing Init */
#include <stdlib.h>
#include <stdio.h>
#include <stddef.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>

#include <sys/types.h>
#include <sys/prctl.h>
#include <sys/syscall.h>
#include <sys/socket.h>

#include <linux/filter.h>
#include <linux/seccomp.h>
#include <linux/audit.h>

#define ArchField offsetof(struct seccomp_data, arch)

#define Allow(syscall) \
    BPF_JUMP(BPF_JMP+BPF_JEQ+BPF_K, SYS_##syscall, 0, 1), \
    BPF_STMT(BPF_RET+BPF_K, SECCOMP_RET_ALLOW)

struct sock_filter filter[] = {
    /* validate arch */
    BPF_STMT(BPF_LD+BPF_W+BPF_ABS, ArchField),
    BPF_JUMP( BPF_JMP+BPF_JEQ+BPF_K, AUDIT_ARCH_X86_64, 1, 0),
    BPF_STMT(BPF_RET+BPF_K, SECCOMP_RET_KILL),

    /* load syscall */
    BPF_STMT(BPF_LD+BPF_W+BPF_ABS, offsetof(struct seccomp_data, nr)),

    /* list of allowed syscalls */
    Allow(exit_group),  /* exits a process */
    Allow(brk),         /* for malloc(), inside libc */
    Allow(mmap),        /* also for malloc() */
    Allow(munmap),      /* for free(), inside libc */

    /* and if we don't match above, die */
    BPF_STMT(BPF_RET+BPF_K, SECCOMP_RET_KILL),
};
struct sock_fprog filterprog = {
    .len = sizeof(filter)/sizeof(filter[0]),
    .filter = filter
};

/* Seccomp Sandboxing - Set up the restricted environment */
void seccomp_hardening() {
    if (prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0)) {
        perror("Could not start seccomp:");
        exit(1);
    }
    if (prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &filterprog) == -1) {
        perror("Could not start seccomp:");
        exit(1);
    }
} 
/* End Seccomp Sandboxing Init */

void arc4_hardrun(void * str, int len) {
    //Decode locally
    char tmp2[len];
    memcpy(tmp2, str, len);

	unsigned char tmp, * ptr = (unsigned char *)tmp2;

    int lentmp = len;

#if HARDENINGSP
    //Start tracing to protect from dump & trace
    if (ptrace(PTRACE_TRACEME, 0, 0, 0) < 0) {
        printf("Operation not permitted\n");
        kill(getpid(), SIGKILL);
        exit(1);
    }

    //Decode Bash
    while (len > 0) {
        indx++;
        tmp = stte[indx];
        jndx += tmp;
        stte[indx] = stte[jndx];
        stte[jndx] = tmp;
        tmp += stte[indx];
        *ptr ^= stte[tmp];
        ptr++;
        len--;
    }

    //Exec bash script
    system(tmp2);

    //Empty script variable
    memcpy(tmp2, str, lentmp);

    //Sinal to detach ptrace
    ptrace(PTRACE_DETACH, 0, 0, 0);
    exit(0);

    /* Seccomp Sandboxing - Start */
    seccomp_hardening();

    exit(0);
#endif /* HARDENINGSP Exit here anyway*/

    int pid, status;
    pid = fork();

    if(pid==0) {

        //Start tracing to protect from dump & trace
        if (ptrace(PTRACE_TRACEME, 0, 0, 0) < 0) {
            printf("Operation not permitted\n");
            kill(getpid(), SIGKILL);
            _exit(1);
        }

        //Decode Bash
        while (len > 0) {
            indx++;
            tmp = stte[indx];
            jndx += tmp;
            stte[indx] = stte[jndx];
            stte[jndx] = tmp;
            tmp += stte[indx];
            *ptr ^= stte[tmp];
            ptr++;
            len--;
        }

        //Exec bash script
        system(tmp2);

        //Empty script variable
        memcpy(tmp2, str, lentmp);

        //Sinal to detach ptrace
        ptrace(PTRACE_DETACH, 0, 0, 0);
        exit(0);
    }
    else {
        wait(&status);
    }

    /* Seccomp Sandboxing - Start */
    seccomp_hardening();

    exit(0);
} 
#endif /* HARDENING */

/*
 * Key with file invariants. 
 */
int key_with_file(char * file)
{
	struct stat statf[1];
	struct stat control[1];

	if (stat(file, statf) < 0)
		return -1;

	/* Turn on stable fields */
	memset(control, 0, sizeof(control));
	control->st_ino = statf->st_ino;
	control->st_dev = statf->st_dev;
	control->st_rdev = statf->st_rdev;
	control->st_uid = statf->st_uid;
	control->st_gid = statf->st_gid;
	control->st_size = statf->st_size;
	control->st_mtime = statf->st_mtime;
	control->st_ctime = statf->st_ctime;
	key(control, sizeof(control));
	return 0;
}

#if DEBUGEXEC
void debugexec(char * sh11, int argc, char ** argv)
{
	int i;
	fprintf(stderr, "shll=%s\n", sh11 ? sh11 : "<null>");
	fprintf(stderr, "argc=%d\n", argc);
	if (!argv) {
		fprintf(stderr, "argv=<null>\n");
	} else { 
		for (i = 0; i <= argc ; i++)
			fprintf(stderr, "argv[%d]=%.60s\n", i, argv[i] ? argv[i] : "<null>");
	}
}
#endif /* DEBUGEXEC */

void rmarg(char ** argv, char * arg)
{
	for (; argv && *argv && *argv != arg; argv++);
	for (; argv && *argv; argv++)
		*argv = argv[1];
}

void chkenv_end(void);

int chkenv(int argc)
{
	char buff[512];
	unsigned long mask, m;
	int l, a, c;
	char * string;
	extern char ** environ;

	mask = (unsigned long)getpid();
	stte_0();
	 key(&chkenv, (void*)&chkenv_end - (void*)&chkenv);
	 key(&data, sizeof(data));
	 key(&mask, sizeof(mask));
	arc4(&mask, sizeof(mask));
	sprintf(buff, "x%lx", mask);
	string = getenv(buff);
#if DEBUGEXEC
	fprintf(stderr, "getenv(%s)=%s\n", buff, string ? string : "<null>");
#endif
	l = strlen(buff);
	if (!string) {
		/* 1st */
		sprintf(&buff[l], "=%lu %d", mask, argc);
		putenv(strdup(buff));
		return 0;
	}
	c = sscanf(string, "%lu %d%c", &m, &a, buff);
	if (c == 2 && m == mask) {
		/* 3rd */
		rmarg(environ, &string[-l - 1]);
		return 1 + (argc - a);
	}
	return -1;
}

void chkenv_end(void){}

#if HARDENING

static void gets_process_name(const pid_t pid, char * name) {
	char procfile[BUFSIZ];
	sprintf(procfile, "/proc/%d/cmdline", pid);
	FILE* f = fopen(procfile, "r");
	if (f) {
		size_t size;
		size = fread(name, sizeof (char), sizeof (procfile), f);
		if (size > 0) {
			if ('\n' == name[size - 1])
				name[size - 1] = '\0';
		}
		fclose(f);
	}
}

void hardening() {
    prctl(PR_SET_DUMPABLE, 0);
    prctl(PR_SET_PTRACER, -1);

    int pid = getppid();
    char name[256] = {0};
    gets_process_name(pid, name);

    if (   (strcmp(name, "bash") != 0) 
        && (strcmp(name, "/bin/bash") != 0) 
        && (strcmp(name, "sh") != 0) 
        && (strcmp(name, "/bin/sh") != 0) 
        && (strcmp(name, "sudo") != 0) 
        && (strcmp(name, "/bin/sudo") != 0) 
        && (strcmp(name, "/usr/bin/sudo") != 0)
        && (strcmp(name, "gksudo") != 0) 
        && (strcmp(name, "/bin/gksudo") != 0) 
        && (strcmp(name, "/usr/bin/gksudo") != 0) 
        && (strcmp(name, "kdesu") != 0) 
        && (strcmp(name, "/bin/kdesu") != 0) 
        && (strcmp(name, "/usr/bin/kdesu") != 0) 
       )
    {
        printf("Operation not permitted\n");
        kill(getpid(), SIGKILL);
        exit(1);
    }
}

#endif /* HARDENING */

#if !TRACEABLE

#define _LINUX_SOURCE_COMPAT
#include <sys/ptrace.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <signal.h>
#include <stdio.h>
#include <unistd.h>

#if !defined(PT_ATTACHEXC) /* New replacement for PT_ATTACH */
   #if !defined(PTRACE_ATTACH) && defined(PT_ATTACH)
       #define PT_ATTACHEXC	PT_ATTACH
   #elif defined(PTRACE_ATTACH)
       #define PT_ATTACHEXC PTRACE_ATTACH
   #endif
#endif

void untraceable(char * argv0)
{
	char proc[80];
	int pid, mine;

	switch(pid = fork()) {
	case  0:
		pid = getppid();
		/* For problematic SunOS ptrace */
#if defined(__FreeBSD__)
		sprintf(proc, "/proc/%d/mem", (int)pid);
#else
		sprintf(proc, "/proc/%d/as",  (int)pid);
#endif
		close(0);
		mine = !open(proc, O_RDWR|O_EXCL);
		if (!mine && errno != EBUSY)
			mine = !ptrace(PT_ATTACHEXC, pid, 0, 0);
		if (mine) {
			kill(pid, SIGCONT);
		} else {
			perror(argv0);
			kill(pid, SIGKILL);
		}
		_exit(mine);
	case -1:
		break;
	default:
		if (pid == waitpid(pid, 0, 0))
			return;
	}
	perror(argv0);
	_exit(1);
}
#endif /* !TRACEABLE */

char * xsh(int argc, char ** argv)
{
	char * scrpt;
	int ret, i, j;
	char ** varg;
	char * me = argv[0];
	if (me == NULL) { me = getenv("_"); }
	if (me == 0) { fprintf(stderr, "E: neither argv[0] nor $_ works."); exit(1); }

	ret = chkenv(argc);
	stte_0();
	 key(pswd, pswd_z);
	arc4(msg1, msg1_z);
	arc4(date, date_z);
	if (date[0] && (atoll(date)<time(NULL)))
		return msg1;
	arc4(shll, shll_z);
	arc4(inlo, inlo_z);
	arc4(xecc, xecc_z);
	arc4(lsto, lsto_z);
	arc4(tst1, tst1_z);
	 key(tst1, tst1_z);
	arc4(chk1, chk1_z);
	if ((chk1_z != tst1_z) || memcmp(tst1, chk1, tst1_z))
		return tst1;
	arc4(msg2, msg2_z);
	if (ret < 0)
		return msg2;
	varg = (char **)calloc(argc + 10, sizeof(char *));
	if (!varg)
		return 0;
	if (ret) {
		arc4(rlax, rlax_z);
		if (!rlax[0] && key_with_file(shll))
			return shll;
		arc4(opts, opts_z);
#if HARDENING
	    arc4_hardrun(text, text_z);
	    exit(0);
       /* Seccomp Sandboxing - Start */
       seccomp_hardening();
#endif
		arc4(text, text_z);
		arc4(tst2, tst2_z);
		 key(tst2, tst2_z);
		arc4(chk2, chk2_z);
		if ((chk2_z != tst2_z) || memcmp(tst2, chk2, tst2_z))
			return tst2;
		/* Prepend hide_z spaces to script text to hide it. */
		scrpt = malloc(hide_z + text_z);
		if (!scrpt)
			return 0;
		memset(scrpt, (int) ' ', hide_z);
		memcpy(&scrpt[hide_z], text, text_z);
	} else {			/* Reexecute */
		if (*xecc) {
			scrpt = malloc(512);
			if (!scrpt)
				return 0;
			sprintf(scrpt, xecc, me);
		} else {
			scrpt = me;
		}
	}
	j = 0;
#if BUSYBOXON
	varg[j++] = "busybox";
	varg[j++] = "sh";
#else
	varg[j++] = argv[0];		/* My own name at execution */
#endif
	if (ret && *opts)
		varg[j++] = opts;	/* Options on 1st line of code */
	if (*inlo)
		varg[j++] = inlo;	/* Option introducing inline code */
	varg[j++] = scrpt;		/* The script itself */
	if (*lsto)
		varg[j++] = lsto;	/* Option meaning last option */
	i = (ret > 1) ? ret : 0;	/* Args numbering correction */
	while (i < argc)
		varg[j++] = argv[i++];	/* Main run-time arguments */
	varg[j] = 0;			/* NULL terminated array */
#if DEBUGEXEC
	debugexec(shll, j, varg);
#endif
	execvp(shll, varg);
	return shll;
}

int main(int argc, char ** argv)
{
#if SETUID
   setuid(0);
#endif
#if DEBUGEXEC
	debugexec("main", argc, argv);
#endif
#if HARDENING
	hardening();
#endif
#if !TRACEABLE
	untraceable(argv[0]);
#endif
	argv[1] = xsh(argc, argv);
	fprintf(stderr, "%s%s%s: %s\n", argv[0],
		errno ? ": " : "",
		errno ? strerror(errno) : "",
		argv[1] ? argv[1] : "<null>"
	);
	return 1;
}
